module{
name=arith
formal=true
}

signal{
name=paddr
type=logic [31:0]
io=input
connect=paddr
}

signal{
name=pwdata
type=logic [31:0]
io=input
connect=pwdata
}

signal{
name=psel
type=logic
io=input
connect=psel
}

signal{
name=pwrite
type=logic
io=input
connect=pwrite
}

signal{
name=penable
type=logic
io=input
connect=penable
}

signal{
name=pslverr
type=logic
io=output
connect=pslverr
}

signal{
name=pready
type=logic
io=output
connect=pready
}

signal{
name=prdata
type=logic [31:0]
io=output
connect=prdata
}

clock{
name=pclk
period=90
}

reset{
name=presetn
period=3e12
duration=180
}


interface{
name=apb
signal=paddr
signal=pwdata
signal=psel
signal=pwrite
signal=penable
signal=prdata
signal=pslverr
signal=pready
clock=pclk
reset=presetn
}

if_instance{
type=apb
con=paddr,paddr
con=pwdata,pwdata
con=psel,psel
con=pwrite,pwrite
con=penable,penable
con=prdata,prdata
con=pslverr,pslverr
con=pready,pready
instance=apb_if
}

field{
name=data
type=logic[31:0]
}

field{
name=addr
type=logic [31:0]
}

field{
name=slverr
type=logic
}

field{
name=rw
type=logic
}

transaction{
name=apb
field=data
field=addr
field=rw
field=slverr
}

agent{
name=apb
instance=apb_agt
interface=apb_if
transaction=apb
driver_policy=
monitor_policy=
type=bidirectional
refmod=arithRfm
comp=arithComp
}

refmod{
name=arithRefmod
instance=arithRfm
refmod_policy=
comp=arithComp
}

comp{
name=comp
instance=arithComp
transaction=apb
}

sequence{
name=apbSequence
agent=apb_agr
transaction=apb
}

test{
name=apbTest
sequence=apbSequence
}