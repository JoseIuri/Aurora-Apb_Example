/**
  ******************************************************************************
  * File automatic generated by XGeneratorTB software
  ******************************************************************************
**/
class apb_driver extends uvm_driver #(apb_transaction);

    apb_transaction req;
    string                tID;

    `uvm_component_utils_begin(apb_driver)
    `uvm_component_utils_end

    // Attributes
    virtual apb_interface apb_if_vif;

    // Methods
    extern function new (string name="apb_driver", uvm_component parent=null);
    extern function void build_phase(uvm_phase phase);
    extern task run_phase (uvm_phase phase);
    extern task DriveItem(apb_transaction item);

endclass : apb_driver


function apb_driver::new(string name="apb_driver", uvm_component parent=null);
    super.new(name, parent);
    this.tID = get_type_name();
endfunction : new

//------------------------------------------------------------------------------
// Build
//
function void apb_driver::build_phase(uvm_phase phase);
    super.build_phase(phase);
    `uvm_info(tID, $sformatf("build_phase begin ..."), UVM_HIGH)

    // Get virtual interface from uvm_config_db
    if (!uvm_config_db#(virtual apb_interface)::get(this, "", "VIRTUAL_IF", this.apb_if_vif)) begin
        `uvm_fatal("NOVIF", {"virtual interface must be set for: ", get_full_name(), ".apb_if_vif"})
    end
endfunction : build_phase

//------------------------------------------------------------------------------
// Get and process items
//
task apb_driver::run_phase(uvm_phase phase);
    super.run_phase(phase);
    // INIT BLOCK
    @(negedge apb_if_vif.presetn);
    apb_if_vif.paddr <= 0;
    apb_if_vif.pwrite <= 0;
    apb_if_vif.psel <= 0;
    apb_if_vif.pwdata = 0;
    
    @(posedge apb_if_vif.presetn);
    forever begin
        // Get the next data item from sequencer
        seq_item_port.get_next_item(req);
        // Execute the item
        this.DriveItem(req);
        seq_item_port.item_done();
    end
endtask : run_phase

//------------------------------------------------------------------------------
// Drive sequence item
//

task apb_driver::DriveItem(apb_transaction item);
    // Add your logic here
    @(posedge apb_if_vif.pclk);

    if(item.rw) begin
        apb_if_vif.paddr <= item.addr;
        apb_if_vif.pwrite <= 0;
        apb_if_vif.psel <= 1;
        
        @(posedge apb_if_vif.pclk);

        apb_if_vif.penable <= 1;
        
        wait(apb_if_vif.pready);
        
        item.data = apb_if_vif.prdata;
        item.slverr = apb_if_vif.pslverr;

        @(posedge apb_if_vif.pclk);

        apb_if_vif.psel <= 0;
        apb_if_vif.penable <= 0;
    end
    else begin
        apb_if_vif.paddr <= item.addr;
        apb_if_vif.pwrite <= 1;
        apb_if_vif.psel <= 1;
        apb_if_vif.pwdata = item.data;
        
        @(posedge apb_if_vif.pclk);
         
        apb_if_vif.penable <= 1;
        
        wait(apb_if_vif.pready);

        item.slverr = apb_if_vif.pslverr;

        @(posedge apb_if_vif.pclk);

        apb_if_vif.psel <= 0;
        apb_if_vif.penable <= 0;
        
    end

endtask : DriveItem
